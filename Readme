
1. Write a basic constructor function to create a Cell class

1.1 Name the class "Cell"
1.2 The constructor function requires 3 arguments: position, velocity, radius.
    i. Position and velocity : Vectors
    ii. Radius : Float or Integer value
1.3 Use the "this" attribute to create attributes of the cell.
1.4 Create two methods (Do not fill them in yet)
    i. "Draw" method - Draws an ellipse at position x,y
    ii. "move" method - Updates the position of the cell using velocity 
    iii. "detectEdge" method - Detects the edges of the cell
    

*Test 1:* 
In the setup function, test out the constructor function. 
 - Uncomment the block of code that says, "testcell" along with the console log statements.
 - What should you see printed in the console if successful?

2 Finish the createCells function. 
2.1 Create a empty new array
2.2 Use for loop to fill it with maxCells number of cells using cells constructor
    i. To start with, give same values for position, velocity and radius.
2.3 Return the array 
2.4 In the setup function, call "createCells" function to create 5 cells on the screen.

*Test 2:* Print the cells array and observe the result.

3. Draw and move the cells 

3.1 Complete the cell methods
    - Draw function - Create an ellipse using at position x,y with cell's radius
    - Move function - Add velocity to the position and store it back in the same variable.

3.2 In draw function,
    - Write a for loop to traverse through all the cells
    - Call the cell's draw method and move method

*Test 3:* Run the code. You should observe cells moving with a velocity. If the cells are in the same position, then you will observe only one cell moving. You will also observe cells moving out of the screen.

4. Edge detection and reversing velocity - "detectEdge" method in cell

4.1 Use conditionals to check if the position of the cell is beyond the boundaries
      - You are using the center of the screen as origin, - For x direction, check if the "x" position is greater than edge of screen (remember what is the value of the right/left edge of the screen)
      - Reverse the "x" velocity if the screen edge has been detected
      - Now, do the same for "y" velocity

4.2 (Alternate logic) Check for distances from the center point
      - On the x direction, distance between current position and center needs to be > width/2 
      - On the y direction, distance between current position and center needs to be > height/2 

*Test 4:* Try both possible implementations. Cells should now bounce back as they hit the edge the wall. 


At this point, take a 5 minute break :-)

5. Cell collision

5.1 Write a new function called "CollideCells". Pass the cells array
5.2 Write two for loops.
    - In the outer loop, store the value in cell1
    - In the inner loop, store value as cell2
5.3 Check if cell1 and cell2 are not the same (using their indices)
    - Detect collision.
        - Compute distance between cell centers
        - Check if value is less than sum of radii
5.4 If there is collision,
    - Reverse the velocity of both the cells.

*Test 4:* Test this with 5 cells only. Use print statements within collision detection to observe that logic works correctly.

TO EXPERIMENT:

 1. Use random vectors for position and velocity

 2. Adding acceleration and forces to each cell 
    - Accceleration is added to velocity for every update. Similar to how velocity is added to position.
    - Add a constant acceleration (e.g., gravity) and ensure that the cells keep falling towards the bottom of screen.

 3. Adding a life counter to each cell
    - Add to each cell an attribute called life that decreases every update.  
    - When life is 0, the cell vanishes from the screen.
    (Read up on array.splice in Javascript)
    - Add a life counter at initialization of the cell
    - Write a method to check if live counter is < 0 for every draw function

 4. Adding forces. Force is added to acceleration for every update.  Apply a force (friction) to ensure that the cells slow down after moving for certain amount of time
